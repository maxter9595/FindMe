from io import BytesIO

import requests
from vk_api import VkUpload
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.utils import get_random_id

from Repository.CardFind import CardFind
from User import User

edit_dict = {
            'first_name': '–∏–º—è',
            'last_name': '—Ñ–∞–º–∏–ª–∏—è',
            'age': '–≤–æ–∑—Ä–∞—Å—Ç',
            'gender': '–ü–æ–ª',
            'city': '–≥–æ—Ä–æ–¥',
            'status': '—Å—Ç–∞—Ç—É—Å',
            'has_photo': '–µ—Å—Ç—å —Ñ–æ—Ç–æ',
            'age_criteria': '—Ñ–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É\n—Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –≤ –≤–∏–¥–µ: 25-55'
            }


def get_hello_message(user_id, first_name):
    text_message = f'üöÄ –ü—Ä–∏–≤–µ—Ç, {first_name}!  üëã  –Ø ‚Äì –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —ç–∫–æ–Ω–æ–º–∏—Ç ' \
    f'—Ç–≤–æ–µ –≤—Ä–µ–º—è –∏ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –ª—é–±–æ–≤—å –±—ã—Å—Ç—Ä–æ –∏ –ª–µ–≥–∫–æ! ' \
    f' ‚è±Ô∏è  –•–æ—á–µ—à—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å–≤–æ–µ–π –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–∏?'

    keyboard = VkKeyboard(one_time=True)
    keyboard.add_button('—Ö–æ—á—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', color=VkKeyboardColor.POSITIVE)

    message = {
        'user_id': user_id,
        'message': text_message,
        'random_id': get_random_id(),
        'keyboard': keyboard.get_keyboard()
    }

    return message


def get_hello_message_error(user_id):
    text_message = f'üöÄ –ü—Ä–∏–≤–µ—Ç! ' \
                   f'–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.' \
                   f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∑–∂–µ.'

    message = {
        'user_id': user_id,
        'message': text_message,
        'random_id': get_random_id()
    }

    return message


def get_registration_message(user: User):
    text_message = f'–ê–Ω–∫–µ—Ç–∞:\n' \
                   f'–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É\n'
    settings = dict(one_time=False, inline=True)
    keyboard = VkKeyboard(**settings)
    keyboard.add_button(label='–ò–º—è: '+user.get_first_name(), color=VkKeyboardColor.SECONDARY,
                                  payload={"action_edit_anketa": "first_name"})
    keyboard.add_line()
    keyboard.add_button(label='–§–∞–º–∏–ª–∏—è: '+user.get_last_name(), color=VkKeyboardColor.SECONDARY,
                                   payload={"action_edit_anketa": "last_name"})
    keyboard.add_line()
    keyboard.add_button(label='–í–æ–∑—Ä–∞—Å—Ç: '+str(user.get_age()), color=VkKeyboardColor.SECONDARY,
                                   payload={"action_edit_anketa": "age"})
    keyboard.add_line()
    keyboard.add_button(label='–ü–æ–ª: '+str(user.get_gender_str()), color=VkKeyboardColor.SECONDARY,
                                   payload={"action_edit_anketa": "gender"})
    keyboard.add_line()
    keyboard.add_button(label='–ì–æ—Ä–æ–¥: '+user.get_city().get('name'), color=VkKeyboardColor.SECONDARY,
                                   payload={"action_edit_anketa": "city"})
    keyboard.add_line()
    keyboard.add_button(label='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É', color=VkKeyboardColor.POSITIVE,
                                   payload={"action_save_anketa": "save_anketa"})
    # keyboard.add_line()
    # keyboard.add_callback_button(label='–ö–æ—Ä–æ—Ç–∫–æ –æ–±–æ –º–Ω–µ: '+user.get_city().get('') + '\t', color=VkKeyboardColor.SECONDARY,
    #                                payload={"action": "edit_about_me"})

    message = {
        'user_id': user.get_user_id(),
        'message': text_message,
        'random_id': get_random_id(),
        'keyboard': keyboard.get_keyboard(),
        'peer_ids': user.get_user_id()
    }

    return message


def get_edit_message(user_id, str_arg):
    text_message = f'–ó–∞–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ' + edit_dict[str_arg] + ':'
    if 'gender' in str_arg:
        text_message += f'1 - –ñ–µ–Ω—â–∏–Ω–∞, 2 - –ú—É–∂—á–∏–Ω–∞, 0 - –í—Å–µ'
    elif str_arg == 'status':
        text_message += f'1 - "–Ω–µ –∂–µ–Ω–∞—Ç (–Ω–µ –∑–∞–º—É–∂–µ–º), –¥—Ä—É–≥–æ–µ - –≤ –ø–æ–∏—Å–∫–µ'
    elif str_arg == 'has_photo':
        text_message += f'1 - "—Ç–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ, –¥—Ä—É–≥–æ–µ - –Ω–µ—Ç'

    # keyboard = VkKeyboard(one_time=True)
    # keyboard.add_button('–û—Ç–º–µ–Ω–∞', color=VkKeyboardColor.NEGATIVE,
    #                     payload={"action_cancel": "cancel_edit_anketa"})

    message = {
        'user_id': user_id,
        'message': text_message,
        'random_id': get_random_id()
    }

    return message


def get_main_menu_message(user: User):
    text_message = f'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    keyboard = VkKeyboard(one_time=False)
    keyboard.add_button('–ü–æ–∏—Å–∫', color=VkKeyboardColor.PRIMARY,
                        payload={"action_main_manu": "find_users"})

    keyboard.add_line()
    keyboard.add_button('–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞', color=VkKeyboardColor.PRIMARY,
                        payload={"action_main_manu": "criteria"})

    keyboard.add_line()
    keyboard.add_button('–ò–∑–±—Ä–∞–Ω–Ω—ã–µ', color=VkKeyboardColor.PRIMARY,
                        payload={"action_main_manu": "go_to_favorites"})

    keyboard.add_line()
    keyboard.add_button('–í —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫', color=VkKeyboardColor.PRIMARY,
                        payload={"action_main_manu": "go_to_exception"})

    # keyboard.add_button('–ê–Ω–∫–µ—Ç–∞', color=VkKeyboardColor.PRIMARY,
    #                     payload={"action_main_manu": "anketa"})
    message = {
        'user_id': user.get_user_id(),
        'message': text_message,
        'random_id': get_random_id(),
        'keyboard': keyboard.get_keyboard()
    }

    return message


def get_message_invitation(user_id):
    text_message = f'–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "start"'
    message = {
        'user_id': user_id,
        'message': text_message,
        'random_id': get_random_id()
    }
    return message


def get_message_done_registration(user_id):
    text_message = f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–æ–Ω—á–µ–Ω–∞'
    message = {
        'user_id': user_id,
        'message': text_message,
        'random_id': get_random_id()
    }
    return message


def get_message_view(attachment, card, user: User):
    profile_str = 'https://vk.com/id' + str(card.id)
    text_message = f'{card.first_name} {card.last_name}\n' \
                   f'{profile_str}'

    keyboard = VkKeyboard(one_time=False)

    if user.get_index_view() > -1:
        if user.get_index_view() > 0:
            keyboard.add_button('–ù–∞–∑–∞–¥', color=VkKeyboardColor.PRIMARY,
                                payload={"action_view": "go_to_back"})

        if user.get_index_view() < user.get_size_list_cards()-1:
            keyboard.add_button('–í–ø–µ—Ä–µ–¥', color=VkKeyboardColor.PRIMARY,
                                payload={"action_view": "go_to_next"})

    if isinstance(card, CardFind):
        keyboard.add_line()
        keyboard.add_button('–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ', color=VkKeyboardColor.PRIMARY,
                            payload={"action_view": "add_favorites"})
        keyboard.add_line()
        keyboard.add_button('–î–æ–±–∞–≤–∏—Ç—å –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫', color=VkKeyboardColor.PRIMARY,
                            payload={"action_view": "add_exceptions"})
    else:
        if user.get_size_list_cards() > 1:
            keyboard.add_line()

        keyboard.add_button('–£–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞', color=VkKeyboardColor.PRIMARY,
                            payload={"action_view": "delete_from_list"})

    # keyboard.add_line()
    # keyboard.add_button('–í —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫', color=VkKeyboardColor.PRIMARY,
    #                     payload={"action_view": "go_to_exception"})

    keyboard.add_line()
    keyboard.add_button('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', color=VkKeyboardColor.PRIMARY,
                        payload={"action_main_manu": "go_to_main_manu"})

    message = {
        'user_id': user.get_user_id(),
        'message': text_message,
        'attachment': attachment,
        'random_id': get_random_id(),
        'keyboard': keyboard.get_keyboard()
    }

    return message


def upload_photo(upload, url):
    img = requests.get(url).content
    f = BytesIO(img)

    response = upload.photo_messages(f)[0]

    owner_id = response['owner_id']
    photo_id = response['id']
    access_key = response['access_key']

    return {'owner_id': owner_id, 'photo_id': photo_id, 'access_key': access_key}


def get_message_error_search(user_id):
    text_message = f'–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º\n–Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å'
    message = {
        'user_id': user_id,
        'message': text_message,
        'random_id': get_random_id()
    }
    return message


def get_message_criteria(user: User):
    text_message = f'–ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:\n' \
                   f'–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É\n'
    criteria = user.get_criteria()
    settings = dict(one_time=False, inline=True)
    keyboard = VkKeyboard(**settings)
    if criteria.gender_id == 1:
        sex_text = '–∂–µ–Ω—â–∏–Ω–∞'
    elif criteria.gender_id == 2:
        sex_text = '–º—É–∂—á–∏–Ω–∞'
    else:
        sex_text = '–≤—Å–µ'
    keyboard.add_button(label='–ü–æ–ª: ' + sex_text,
                        color=VkKeyboardColor.SECONDARY, payload={"action_edit_criteria": "gender"})
    keyboard.add_line()
    keyboard.add_button(label='–°—Ç–∞—Ç—É—Å: ' + ("–Ω–µ –∂–µ–Ω–∞—Ç (–Ω–µ –∑–∞–º—É–∂–µ–º)" if criteria.status == 1 else "–≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø–æ–∏—Å–∫–µ"),
                        color=VkKeyboardColor.SECONDARY, payload={"action_edit_criteria": "status"})
    keyboard.add_line()
    keyboard.add_button(label='–í–æ–∑—Ä–∞—Å—Ç —Å - –ø–æ: —Å ' + str(criteria.age_from) + ' - –ø–æ ' + str(criteria.age_to),
                        color=VkKeyboardColor.SECONDARY, payload={"action_edit_criteria": "age"})
    keyboard.add_line()
    keyboard.add_button(label='–ì–æ—Ä–æ–¥: ' + criteria.city['name'], color=VkKeyboardColor.SECONDARY,
                        payload={"action_edit_criteria": "city"})
    keyboard.add_line()
    keyboard.add_button(label='–ï—Å—Ç—å —Ñ–æ—Ç–æ: ' + ("–¥–∞" if criteria.has_photo == 1 else "–Ω–µ—Ç"),
                        color=VkKeyboardColor.SECONDARY, payload={"action_edit_criteria": "has_photo"})
    keyboard.add_line()
    keyboard.add_button(label='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏', color=VkKeyboardColor.POSITIVE,
                        payload={"action_save_criteria": "save_criteria"})

    message = {
        'user_id': user.get_user_id(),
        'message': text_message,
        'random_id': get_random_id(),
        'keyboard': keyboard.get_keyboard(),
        'peer_ids': user.get_user_id()
    }

    return message